{"version":3,"sources":["../../../src/api/controllers/Host.js"],"names":["configs","MAX_APPS_APDEX","MAX_APPS_HOST","Host","data","hosts","hostsApps","appsWithHosts","init","hostsNames","forEach","app","appId","createAppId","host","hostName","includes","push","HostModel","appParsed","ApplicationModel","name","apdex","version","contributors","apps","normalizeHosts","Math","random","toString","substr","slice","normalized","Object","keys","sort","a","b","sortApdex","applyMaxAppsApdex","id","JSON","parse","stringify","filter","hostsArray","Array","isArray","item","index","indexOf"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport HostModel from '../models/Host';\nimport ApplicationModel from '../models/Application';\n\nimport data from '../data/host-app-data.json';\n\nconst configs = {\n    MAX_APPS_APDEX: 25,\n    MAX_APPS_HOST: 5\n};\n\nexport default class Host {\n    constructor() {\n        this.data = data;\n        this.configs = configs;\n        this.hosts = [];\n        this.hostsApps = {};\n        this.appsWithHosts = {};\n        this.init();\n    }\n\n    init() {\n        const hostsNames = [];\n        const hosts = [];\n\n        this.data.forEach((app) => {\n            const appId = this.createAppId();\n            this.appsWithHosts[appId] = [];\n\n            app.host.forEach(((hostName) => {\n                if (!hostsNames.includes(hostName)) {\n                    hostsNames.push(hostName);\n                    this.hostsApps[hostName] = new HostModel(hostName);\n                }\n\n                const appParsed = new ApplicationModel(\n                    appId,\n                    app.name,\n                    app.apdex,\n                    app.version,\n                    app.contributors\n                );\n\n                this.appsWithHosts[appId].push(hostName);\n\n                this.hostsApps[hostName].apps.push(appParsed);\n            }));\n        });\n\n        this.hosts = hosts;\n    }\n\n    getHostsApps() {\n        return this.normalizeHosts(this.hostsApps);\n    }\n\n    getAppsWithHosts() {\n        return this.appsWithHosts;\n    }\n\n    createAppId() {\n        return Math.random().toString(36).substr(2, 16);\n    }\n\n    applyMaxAppsApdex(apps) {\n        return apps.slice(0, this.configs.MAX_APPS_APDEX);\n    }\n\n    normalizeHosts(hosts) {\n        const normalized = [];\n\n        Object.keys(hosts).forEach((host) => {\n            normalized.push(hosts[host]);\n        });\n\n        return normalized;\n    }\n\n    sortApdex(apps) {\n        return apps.sort((a, b) => (b.apdex - a.apdex));\n    }\n\n    getTopAppsByHost(hostName) {\n        if (!this.hostsApps[hostName]) {\n            return [];\n        }\n\n        const apps = this.sortApdex(this.hostsApps[hostName].apps);\n\n        return this.applyMaxAppsApdex(apps);\n    }\n\n    removeAppFromHosts(id) {\n        if (!this.appsWithHosts[id]) {\n            return null;\n        }\n\n        const hostsApps = JSON.parse(JSON.stringify(this.hostsApps));\n\n        this.appsWithHosts[id].forEach((hostName) => {\n            const apps = hostsApps[hostName].apps.filter((app) => app.id !== id);\n\n            hostsApps[hostName].apps = this.applyMaxAppsApdex(this.sortApdex(apps));\n        });\n\n        return this.normalizeHosts(hostsApps);\n    }\n\n    addAppToHosts({\n        name,\n        host,\n        contributors = [],\n        apdex = 1,\n        version = null\n    }) {\n        if (!name && !host) {\n            return null;\n        }\n\n        let hostsArray = host;\n\n        if (!Array.isArray(host)) {\n            hostsArray = [];\n            hostsArray.push(host);\n        }\n\n        hostsArray = hostsArray.filter((item, index) => hostsArray.indexOf(item) === index);\n\n        // this.data.push({\n        //     name,\n        //     host: hostsArray,\n        //     contributors,\n        //     apdex,\n        //     version\n        // });\n\n        const appId = this.createAppId();\n\n        const appParsed = new ApplicationModel(\n            appId,\n            name,\n            apdex,\n            version,\n            contributors\n        );\n\n        // this.appsWithHosts[appId] = hostsArray;\n\n        // hostsArray.forEach((hostName) => {\n        //     if (!this.hostsApps[hostName]) {\n        //         this.hostsApps[hostName] = new HostModel(hostName);\n        //     }\n        //     this.hostsApps[hostName].apps.push(appParsed);\n        // });\n\n        return { app: appParsed, hosts: hostsArray };\n    }\n}\n"],"file":"Host.js"}